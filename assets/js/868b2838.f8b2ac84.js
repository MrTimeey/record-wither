"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[120],{542:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"usage-examples","title":"Usage Examples","description":"The record-wither library makes it simple to create modified copies of immutable Java records.","source":"@site/docs/usage-examples.md","sourceDirName":".","slug":"/usage-examples","permalink":"/record-wither/docs/usage-examples","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started with Record Wither","permalink":"/record-wither/docs/getting-started"}}');var d=t(4848),i=t(8453);const s={},r="Usage Examples",l={},c=[{value:"Example: Updating an <code>int</code> field",id:"example-updating-an-int-field",level:2},{value:"Example: Updating a <code>String</code> field",id:"example-updating-a-string-field",level:2},{value:"Example: Updating another <code>String</code> field",id:"example-updating-another-string-field",level:2},{value:"Example: Updating a <code>boolean</code> field",id:"example-updating-a-boolean-field",level:2},{value:"Example: Updating a <code>double</code> field",id:"example-updating-a-double-field",level:2},{value:"Example: Updating an <code>enum</code> field",id:"example-updating-an-enum-field",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"usage-examples",children:"Usage Examples"})}),"\n",(0,d.jsxs)(n.p,{children:["The ",(0,d.jsx)(n.code,{children:"record-wither"})," library makes it simple to create modified copies of immutable Java records."]}),"\n",(0,d.jsx)(n.p,{children:"Below are practical examples derived directly from the test suite:"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-java",children:"import io.github.mrtimeey.records.Withable;\n\npublic enum Status {\n    ACTIVE,\n    INACTIVE\n}\n\npublic record TestRecord(String name, String description, int count, boolean active, double score, Status status)\n        implements Withable<TestRecord> {}\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"example-updating-an-int-field",children:["Example: Updating an ",(0,d.jsx)(n.code,{children:"int"})," field"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-java",children:'TestRecord base = new TestRecord("Test", "RecordWither", 3, true, 1.5, Status.ACTIVE);\n\nTestRecord updated = base.with(TestRecord::count, 42);\n\n// base remains unchanged\nSystem.out.println(base.count()); // 3\n\n// updated contains the new value\nSystem.out.println(updated.count()); // 42\n'})}),"\n",(0,d.jsxs)(n.h2,{id:"example-updating-a-string-field",children:["Example: Updating a ",(0,d.jsx)(n.code,{children:"String"})," field"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-java",children:'TestRecord updated = base.with(TestRecord::name, "Neu");\n\nSystem.out.println(base.name());   // Test\nSystem.out.println(updated.name()); // Neu\n'})}),"\n",(0,d.jsxs)(n.h2,{id:"example-updating-another-string-field",children:["Example: Updating another ",(0,d.jsx)(n.code,{children:"String"})," field"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-java",children:'TestRecord updated = base.with(TestRecord::description, "NeuDesc");\n\nSystem.out.println(base.description());   // RecordWither\nSystem.out.println(updated.description()); // NeuDesc\n'})}),"\n",(0,d.jsxs)(n.h2,{id:"example-updating-a-boolean-field",children:["Example: Updating a ",(0,d.jsx)(n.code,{children:"boolean"})," field"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-java",children:"TestRecord updated = base.with(TestRecord::active, false);\n\nSystem.out.println(base.active());   // true\nSystem.out.println(updated.active()); // false\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"example-updating-a-double-field",children:["Example: Updating a ",(0,d.jsx)(n.code,{children:"double"})," field"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-java",children:"TestRecord updated = base.with(TestRecord::score, 9.99);\n\nSystem.out.println(base.score());   // 1.5\nSystem.out.println(updated.score()); // 9.99\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"example-updating-an-enum-field",children:["Example: Updating an ",(0,d.jsx)(n.code,{children:"enum"})," field"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-java",children:"TestRecord updated = base.with(TestRecord::status, Status.INACTIVE);\n\nSystem.out.println(base.status());   // ACTIVE\nSystem.out.println(updated.status()); // INACTIVE\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(6540);const d={},i=a.createContext(d);function s(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);