name: Publish

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # komplette History und alle Tags holen
          fetch-tags: true

      - name: Setup Java (with GPG import)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: "unused"

      - name: Override empty passphrase
        run: echo "MAVEN_GPG_PASSPHRASE=" >> $GITHUB_ENV

      - name: Extract version from tag
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Debug GPG Key
        run: gpg --list-secret-keys --keyid-format=long

      - name: Provide minimal Maven settings
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>central</id>
                <username>${{ secrets.OSSRH_USERNAME }}</username>
                <password>${{ secrets.OSSRH_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Set release version
        run: |
          mvn -B versions:set -DnewVersion=${VERSION} -DgenerateBackupPoms=false

      - name: Publish
        run: |
          mvn -B install central-publishing:publish -Prelease
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}

      # -------------------------
      # Changelog-Erstellung
      # -------------------------
      - name: Generate changelog
        id: changelog
        run: |
          # Vorherigen Tag finden
          prev_tag=$(git tag --sort=creatordate | grep -B1 "${GITHUB_REF_NAME}" | head -n1 || true)

          if [ -n "$prev_tag" ]; then
            echo "Commits since $prev_tag:" > RELEASE_NOTES.md
            git log "${prev_tag}..${GITHUB_REF_NAME}" --pretty=format:"- %s" >> RELEASE_NOTES.md
          else
            echo "Initial release" > RELEASE_NOTES.md
          fi

          echo "=== RELEASE NOTES ==="
          cat RELEASE_NOTES.md

      # -------------------------
      # GitHub Release
      # -------------------------
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  javadoc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Build Javadocs
        run: mvn -B clean javadoc:javadoc

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/site/apidocs
